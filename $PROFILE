# Module - color for ls command
Import-Module Get-ChildItemColor -ErrorAction SilentlyContinue

# ls
Remove-Item Alias:ls -ErrorAction SilentlyContinue
function ls { 
  Get-ChildItemColor @Args
}

# param
$esc    = [char]27
$orange = "$esc[38;5;208m"
$green  = "$esc[38;5;10m"
$red    = "$esc[38;5;9m"
$reset  = "$esc[0m"

# custom command: clear + ls
function cl {
 
  Clear-Host
  Get-ChildItem
  Get-ChildItemColor
}

# custom command: cd + ls
function cdls {
  param (
  [Parameter(Mandatory = ${true})]
	[string]${wantedPath}
  )
  
  Set-Location ${wantedPath}
  Get-ChildItem
  "<${wantedPath}> -> <$(Get-Location)>"
}

# custom command: mkdir $FILE | cd
function mkcd {
  param (
	[Parameter(Mandatory = ${true})]
	[string]${FileName}
  )

  mkdir ${FileName}
  Set-Location ${FileName}
}

# custom command: delcd $FILE // cd .. ; del $FILE with -Force
function delcd {
  ${currentPath} = Get-Location

  Set-Location ..
  Remove-Item -Recurse -Force ${currentPath}

  "Deleted <${currentPath}> and cd .."
}

# custom command: yes command from gnu/linux
function yes {
  param (
    [string]${Text} = "Y",
    [int]${Count}
  )
  
  if ($PSBoundParameters.ContainsKey('Count')) {
    1..$Count | ForEach-Object { $Text }
  } else {
    while ($true) { $Text }
  }
}

# Color for PS C:\Users\SeeSee1> -- ORANGE --
function prompt {

  # For Status Text
  $isSuccess = $?
  $isExitError    = $LASTEXITCODE

  $path   = (Get-Location)

  # Is Status "OK"?
  $wasLastOK = $isSuccess -and (($isExitError -eq $null) -or ($isExitError -eq 0))
  
  if (!$wasLastOK) {
  	$status = "${red}LAST-CMD${reset}"
	$errorCode = "${red}ERROR${reset}"
  } 
  else {
  	$status = "${green}Status${reset}"
	$errorCode = "${green}OK${reset}"
  } 

  "[${status}: ${errorCode}] ${orange}${path}>${reset} "
}

# Command to clear Screen
Clear-Host
